services:
  # PostgreSQL 数据库
  db:
    image: postgres:15-alpine
    container_name: pindata_postgres
    restart: always
    environment:
      PGUSER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: pindata_dataset
      PGDATA: /var/lib/postgresql/data/pgdata
    command: >
      postgres -c 'max_connections=100'
               -c 'shared_buffers=128MB'
               -c 'work_mem=4MB'
               -c 'maintenance_work_mem=64MB'
               -c 'effective_cache_size=1024MB'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "15432:5432"
    healthcheck:
      test: ['CMD', 'pg_isready', '-h', 'localhost', '-U', 'postgres', '-d', 'pindata_dataset']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pindata_network

  # MinIO 对象存储
  minio:
    image: minio/minio:latest
    container_name: pindata_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"     # API 端口
      - "9001:9001"     # 控制台端口
    volumes:
      - ./data/minio:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - pindata_network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: pindata_redis
    ports:
      - "16379:6379"
    volumes:
      - ./data/redis:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - pindata_network

  # PinData API 服务
  pindata-api:
    image: pindata/pindata-api:v0.0.6.4
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: pindata_api
    ports:
      - "8897:8897"
    environment:
      # Flask配置
      - FLASK_APP=run.py
      - FLASK_ENV=development
      - SECRET_KEY=your-secret-key-change-in-production
      
      # 数据库配置
      - DATABASE_URL=postgresql://postgres:password@db:5432/pindata_dataset
      
      # 数据库连接池配置
      - DB_POOL_SIZE=10
      - DB_POOL_TIMEOUT=30
      - DB_POOL_RECYCLE=3600
      - DB_MAX_OVERFLOW=20
      - DB_POOL_PRE_PING=true
      - DB_CONNECT_TIMEOUT=10
      
      # 数据库自动初始化配置
      - AUTO_CREATE_DATABASE=true
      - DATABASE_INIT_RETRY_COUNT=3
      - DATABASE_INIT_RETRY_DELAY=5
      
      # Redis配置
      - REDIS_URL=redis://redis:6379/0
      
      # MinIO配置
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=false
      - MINIO_BUCKET_NAME=pindata-bucket
      - MINIO_RAW_DATA_BUCKET=raw-data
      - MINIO_DATASETS_BUCKET=datasets
      - MINIO_DEFAULT_BUCKET=pindata-bucket
      
      # Celery配置
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - CELERY_TASK_SERIALIZER=json
      - CELERY_RESULT_SERIALIZER=json
      - CELERY_ACCEPT_CONTENT=json
      - CELERY_TIMEZONE=UTC
      - CELERY_ENABLE_UTC=true
      
      # API配置
      - API_PREFIX=/api/v1
      - PAGINATION_PAGE_SIZE=20
      
      # JWT配置
      - JWT_SECRET_KEY=your-jwt-secret-key-change-in-production
      - JWT_ACCESS_TOKEN_EXPIRES=3600
      
      # CORS配置
      - CORS_ORIGINS=*
      
      # 文件上传配置
      - MAX_CONTENT_LENGTH=104857600
      - ALLOWED_EXTENSIONS=txt,pdf,docx,pptx,doc,ppt
      
      # 健康检查配置
      - HEALTH_CHECK_ENABLED=true
      
    volumes:
      - ../backend:/app
      - ./data/api:/app/data
    depends_on:
      - db
      - redis
      - minio
    restart: unless-stopped
    networks:
      - pindata_network
    command: ["python", "run.py"]

  # PinData Celery Worker 服务
  pindata-celery:
    image: pindata/pindata-api:v0.0.6.4
    build:
      context: ../backend
      dockerfile: Dockerfile  
    container_name: pindata_celery
    environment:
      # Flask配置
      - FLASK_APP=run.py
      - FLASK_ENV=development
      - SECRET_KEY=your-secret-key-change-in-production
      
      # 数据库配置
      - DATABASE_URL=postgresql://postgres:password@db:5432/pindata_dataset
      
      # 数据库连接池配置
      - DB_POOL_SIZE=10
      - DB_POOL_TIMEOUT=30
      - DB_POOL_RECYCLE=3600
      - DB_MAX_OVERFLOW=20
      - DB_POOL_PRE_PING=true
      - DB_CONNECT_TIMEOUT=10
      
      # 数据库自动初始化配置
      - AUTO_CREATE_DATABASE=true
      - DATABASE_INIT_RETRY_COUNT=3
      - DATABASE_INIT_RETRY_DELAY=5
      
      # Redis配置
      - REDIS_URL=redis://redis:6379/0
      
      # MinIO配置
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=false
      - MINIO_BUCKET_NAME=pindata-bucket
      - MINIO_RAW_DATA_BUCKET=raw-data
      - MINIO_DATASETS_BUCKET=datasets
      - MINIO_DEFAULT_BUCKET=pindata-bucket
      
      # Celery配置
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - CELERY_TASK_SERIALIZER=json
      - CELERY_RESULT_SERIALIZER=json
      - CELERY_ACCEPT_CONTENT=json
      - CELERY_TIMEZONE=UTC
      - CELERY_ENABLE_UTC=true
      - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
      
      # API配置
      - API_PREFIX=/api/v1
      - PAGINATION_PAGE_SIZE=20
      
      # JWT配置
      - JWT_SECRET_KEY=your-jwt-secret-key-change-in-production
      - JWT_ACCESS_TOKEN_EXPIRES=3600
      
      # CORS配置
      - CORS_ORIGINS=*
      
      # 文件上传配置
      - MAX_CONTENT_LENGTH=104857600
      - ALLOWED_EXTENSIONS=txt,pdf,docx,pptx,doc,ppt
      
      # 健康检查配置
      - HEALTH_CHECK_ENABLED=true
      
    volumes:
      - ../backend:/app
      - ./data/celery:/app/data
    depends_on:
      - db
      - redis
      - minio
    restart: unless-stopped
    networks:
      - pindata_network
    command: ["celery", "-A", "celery_worker.celery", "worker", "--loglevel=info", "--pool=threads", "--concurrency=4", "-n", "worker@%h"]

  # PinData Frontend 服务
  pindata-frontend:
    image: pindata/pindata-frontend:v0.0.6.4
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: pindata_frontend
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - pindata-api
    restart: unless-stopped
    networks:
      - pindata_network

# 数据卷
volumes:
  postgres_data:

# 网络
networks:
  pindata_network:
    driver: bridge