{
  "MIXTURE": [],
  "TEXT2SQL": [
    {
      "node": 1,
      "name": "SQLFilter",
      "type": "generator",
      "description": "数据筛选：筛选 gold SQL 执行异常，以及模型判定 gold SQL 与 question 不一致的数据；可选地将 evidence 和 question 合并到 evidence_question 字段。",
      "input": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total sales amount?",
          "SQL": "SELECT SUM(amount) FROM sales;",
          "evidence": "sales table contains all transactions"
        }
      ],
      "output": {
        "output_file": [
          {
            "question_id": 123,
            "db_id": "db1",
            "question": "Find the total sales amount?",
            "SQL": "SELECT SUM(amount) FROM sales;",
            "evidence": "sales table contains all transactions",
            "evidence_question": "sales table contains all transactions Find the total sales amount?"
          }
        ],
        "output_note_file": [
          {
            "question_id": 123,
            "db_id": "db1",
            "question": "Find the total sales amount?",
            "SQL": "SELECT SUM(amount) FROM sales;",
            "evidence": "sales table contains all transactions",
            "evidence_question": "sales table contains all transactions Find the total sales amount?",
            "is_correct": true,
            "exec_result": "[{\"SUM(amount)\": 10000}]",
            "consistency": true,
            "consistency_reason": "SQL matches question intent"
          }
        ]
      },
      "command": "python Text2SqlPipeline/code/SQLFilter.py --yaml_path \"Text2SqlPipeline/yaml/SQLFilter.yaml\"",
      "required": true,
      "depends_on": [],
      "mode": ""
    },
    {
      "node": 2,
      "name": "SQLDifficultyClassifier",
      "type": "generator",
      "description": "SQL 难度分类：提取 SQL 中的关键词，基于关键词数量统计划分难度。",
      "input": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total sales amount?",
          "SQL": "SELECT SUM(amount) FROM sales;"
        }
      ],
      "output": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total sales amount?",
          "SQL": "SELECT SUM(amount) FROM sales;",
          "sql_component_difficulty": 1.0
        }
      ],
      "command": "python Text2SqlPipeline/code/SQLDifficultyClassifier.py --yaml_path \"Text2SqlPipeline/yaml/SQLDifficultyClassifier.yaml\"",
      "required": false,
      "depends_on": []
    },
    {
      "node": 3,
      "name": "SchemaLinking",
      "type": "generator",
      "description": "模式链接：从数据库的所有表和列中提取需要的表和列；支持 eval（模型预测）和 train（SQL 匹配）两种模式。",
      "input": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total sales amount?",
          "sql_component_difficulty": 1.0
        },
        {
          "db_id": "db1",
          "table_names_original": ["sales", "customers"],
          "table_names": ["Sales", "Customers"],
          "column_names_original": [["id", "amount"], ["id", "name"]],
          "column_names": [["ID", "AMOUNT"], ["ID", "NAME"]]
        }
      ],
      "output": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total sales amount?",
          "sql_component_difficulty": 1.0,
          "selected_schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          }
        }
      ],
      "command": "python Text2SqlPipeline/code/SchemaLinking.py --yaml_path \"Text2SqlPipeline/yaml/SchemaLinking_eval.yaml\"",
      "required": true,
      "depends_on": []
    },
    {
      "node": 4,
      "name": "DatabaseSchemaExtractor",
      "type": "generator",
      "description": "提取并构造所需的 Schema 数据：基于 Schema Linking 筛选结果和数据库实例，构造格式化的 Schema 子集与示例。",
      "input": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total sales amount?",
          "sql_component_difficulty": 1.0,
          "selected_schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          }
        }
      ],
      "output": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total sales amount?",
          "sql_component_difficulty": 1.0,
          "schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "selected_schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "raw_schema": {
            "sales": {
              "columns": ["id", "amount"]
            }
          },
          "ddl": "CREATE TABLE sales (id INT, amount DECIMAL);",
          "whole_format_schema": "Table sales(id: INT, amount: DECIMAL) — examples: (1, 100.00), (2, 200.00)",
          "selected_format_schema": "sales(id: INT, amount: DECIMAL)"
        }
      ],
      "command": "python Text2SqlPipeline/code/DatabaseSchemaExtractor.py --yaml_path Text2SqlPipeline/yaml/DataSchemaExtractor.yaml",
      "required": true,
      "depends_on": []
    },
    {
      "node": 5,
      "name": "ExtraKnowledgeGenerator",
      "type": "generator",
      "description": "额外知识生成：基于 NL Question、SQL、Schema 生成所需的补充知识，填补语言描述与 SQL 之间的 gap。",
      "input": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total sales amount?",
          "sql_component_difficulty": 1.0,
          "schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "selected_schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "ddl": "CREATE TABLE sales (id INT, amount DECIMAL);",
          "whole_format_schema": "Table sales(id: INT, amount: DECIMAL) — examples: (1, 100.00), (2, 200.00)",
          "selected_format_schema": "sales(id: INT, amount: DECIMAL)"
        }
      ],
      "output": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total sales amount?",
          "evidence": "The sales table stores transaction amounts per row.",
          "sql_component_difficulty": 1.0,
          "schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "selected_schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "ddl": "CREATE TABLE sales (id INT, amount DECIMAL);",
          "whole_format_schema": "Table sales(id: INT, amount: DECIMAL) — examples: (1, 100.00), (2, 200.00)",
          "selected_format_schema": "sales(id: INT, amount: DECIMAL)",
          "extra_knowledge": "Each row in sales represents one transaction amount in USD."
        }
      ],
      "command": "python Text2SqlPipeline/code/ExtraKnowledgeGenerator.py --yaml_path Text2SqlPipeline/yaml/ExtraKnowledgeGenerator.yaml",
      "required": false,
      "depends_on": []
    },
    {
      "node": 6,
      "name": "QuestionRefiner",
      "type": "generator",
      "description": "自然语言问题优化：将表达不清或多问合一的 NL question 拆分、统一为以提问词开头的格式，并通过 LLM 复核。",
      "input": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total and average sales?",
          "evidence": "Each row in sales represents one transaction amount in USD.",
          "sql_component_difficulty": 1.0,
          "schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "selected_schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "ddl": "CREATE TABLE sales (id INT, amount DECIMAL);",
          "whole_format_schema": "Table sales(id: INT, amount: DECIMAL) — examples: (1, 100.00), (2, 200.00)",
          "selected_format_schema": "sales(id: INT, amount: DECIMAL)"
        }
      ],
      "output": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total and average sales?",
          "refined_question": "What is the total sales amount? How much is the average sale?",
          "evidence": "Each row in sales represents one transaction amount in USD.",
          "sql_component_difficulty": 1.0,
          "schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "selected_schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "ddl": "CREATE TABLE sales (id INT, amount DECIMAL);",
          "whole_format_schema": "Table sales(id: INT, amount: DECIMAL) — examples: (1, 100.00), (2, 200.00)",
          "selected_format_schema": "sales(id: INT, amount: DECIMAL)"
        }
      ],
      "command": "python Text2SqlPipeline/code/QuestionRefiner.py --yaml_path Text2SqlPipeline/yaml/QuestionRefiner.yaml",
      "required": false,
      "depends_on": []
    },
    {
      "node": 7,
      "name": "PromptGenerator",
      "type": "generator",
      "description": "提示词生成：基于 NL Question、SQL Query、Schema 按特定格式构造 Prompt，支持 dail-sql 与 omni-sql 两种 Zero-shot 模式，可选 CoT 引导。",
      "input": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total sales amount?",
          "refined_question": "What is the total sales amount?",
          "evidence": "Each row in sales represents one transaction amount in USD.",
          "sql_component_difficulty": 1.0,
          "schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "selected_schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "ddl": "CREATE TABLE sales (id INT, amount DECIMAL);",
          "whole_format_schema": "Table sales(id: INT, amount: DECIMAL) — examples: (1, 100.00), (2, 200.00)",
          "selected_format_schema": "sales(id: INT, amount: DECIMAL)"
        }
      ],
      "output": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total sales amount?",
          "refined_question": "What is the total sales amount?",
          "evidence": "Each row in sales represents one transaction amount in USD.",
          "sql_component_difficulty": 1.0,
          "schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "selected_schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "ddl": "CREATE TABLE sales (id INT, amount DECIMAL);",
          "whole_format_schema": "Table sales(id: INT, amount: DECIMAL) — examples: (1, 100.00), (2, 200.00)",
          "selected_format_schema": "sales(id: INT, amount: DECIMAL)",
          "final_prompt": "### Instruction:\nGenerate an SQL query for the following question...\n### Question:\nWhat is the total sales amount?\n### Schema:\n..."
        }
      ],
      "command": "python Text2SqlPipeline/code/PromptGenerator.py --yaml_path Text2SqlPipeline/yaml/PromptGenerator.yaml",
      "required": true,
      "depends_on": []
    },
    {
      "node": 8,
      "name": "Text2SQLDifficultyClassifier",
      "type": "generator",
      "description": "SQL 生成难度分类：基于模型执行正确率，对 SQL 生成难度进行划分（easy/medium/hard）。",
      "input": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total sales amount?",
          "refined_question": "What is the total sales amount?",
          "evidence": "Each row in sales represents one transaction amount in USD.",
          "sql_component_difficulty": 1.0,
          "schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "selected_schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "ddl": "CREATE TABLE sales (id INT, amount DECIMAL);",
          "whole_format_schema": "Table sales(id: INT, amount: DECIMAL) — examples: (1, 100.00), (2, 200.00)",
          "selected_format_schema": "sales(id: INT, amount: DECIMAL)",
          "final_prompt": "### Instruction:\nGenerate an SQL query for the following question...\n### Question:\nWhat is the total sales amount?\n### Schema:\n..."
        }
      ],
      "output": [
        {
          "question_id": 123,
          "db_id": "db1",
          "question": "Find the total sales amount?",
          "refined_question": "What is the total sales amount?",
          "evidence": "Each row in sales represents one transaction amount in USD.",
          "sql_component_difficulty": 1.0,
          "schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "selected_schema": {
            "tables": ["sales"],
            "columns": [["id", "amount"]]
          },
          "ddl": "CREATE TABLE sales (id INT, amount DECIMAL);",
          "whole_format_schema": "Table sales(id: INT, amount: DECimal) — examples: (1, 100.00), (2, 200.00)",
          "selected_format_schema": "sales(id: INT, amount: DECIMAL)",
          "final_prompt": "### Instruction:\nGenerate an SQL query for the following question...\n### Question:\nWhat is the total sales amount?\n### Schema:\n...",
          "sql_execution_difficulty": "easy",
          "cnt_true": 9,
          "predicted_sqls": [
            "SELECT SUM(amount) FROM sales;",
            "SELECT SUM(amount) AS total FROM sales;"
          ]
        }
      ],
      "command": "python Text2SqlPipeline/code/Text2SQLDifficultyClassifier.py --yaml_path \"Text2SqlPipeline/yaml/Text2SQLDifficultyClassifier.yaml\"",
      "required": false,
      "depends_on": []
    }
  ],
  "TEXT": [
    {
      "node": 1,
      "name": "LanguageFilter",
      "type": "processor",
      "description": "语言过滤，只保留英文，删除部分数据",
      "input": [
        { "text": "Hello world" },
        { "text": "你好，世界" }
      ],
      "output": [
        { "text": "Hello world" }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/LanguageFilter.yaml --step_name LanguageFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 2,
      "name": "RemoveExtraSpacesRefiner",
      "type": "processor",
      "description": "数据改写，删除多余空格，只改写指定 key 中的内容，不改变数据总量",
      "input": [
        { "text": "This  is   a   test." }
      ],
      "output": [
        { "text": "This is a test." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/RemoveExtraSpacesRefiner.yaml --step_name RemoveExtraSpacesRefiner --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 3,
      "name": "RemoveEmojiRefiner",
      "type": "processor",
      "description": "数据改写，删除表情符号",
      "input": [
        { "text": "I love pizza 🍕😊" }
      ],
      "output": [
        { "text": "I love pizza " }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/RemoveEmojiRefiner.yaml --step_name RemoveEmojiRefiner --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 4,
      "name": "HtmlUrlRemoverRefiner",
      "type": "processor",
      "description": "数据改写，删除 HTML 标签",
      "input": [
        { "text": "<p>Hello <a href='url'>world</a></p>" }
      ],
      "output": [
        { "text": "Hello world" }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/HtmlUrlRemoverRefiner.yaml --step_name HtmlUrlRemoverRefiner --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 5,
      "name": "MinHashDeduplicator",
      "type": "processor",
      "description": "MinHash 数据去重，删除部分数据",
      "input": [
        { "text": "Duplicate sentence." },
        { "text": "Duplicate sentence." }
      ],
      "output": [
        { "text": "Duplicate sentence." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/MinHashDeduplicator.yaml --step_name MinHashDeduplicator --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 6,
      "name": "BlocklistFilter",
      "type": "processor",
      "description": "过滤屏蔽词（脏、粗俗、污秽词），删除部分数据",
      "input": [
        { "text": "This is a clean sentence." },
        { "text": "This is a shitty sentence." }
      ],
      "output": [
        { "text": "This is a clean sentence." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/BlocklistFilter.yaml --step_name BlocklistFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 7,
      "name": "WordNumberFilter",
      "type": "processor",
      "description": "文本单词数量过滤",
      "input": [
        { "text": "Too short" },
        { "text": "This sentence has an acceptable number of words." }
      ],
      "output": [
        { "text": "This sentence has an acceptable number of words." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/WordNumberFilter.yaml --step_name WordNumberFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 8,
      "name": "ColonEndFilter",
      "type": "processor",
      "description": "过滤冒号结尾的文本",
      "input": [
        { "text": "This ends with a colon:" },
        { "text": "This is a complete sentence." }
      ],
      "output": [
        { "text": "This is a complete sentence." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/ColonEndFilter.yaml --step_name ColonEndFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 9,
      "name": "SentenceNumberFilter",
      "type": "processor",
      "description": "语句数量过滤",
      "input": [
        { "text": "One sentence only." },
        { "text": "This is sentence one. This is sentence two." }
      ],
      "output": [
        { "text": "This is sentence one. This is sentence two." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/SentenceNumberFilter.yaml --step_name SentenceNumberFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 10,
      "name": "LineEndWithEllipsisFilter",
      "type": "processor",
      "description": "按照比例过滤以省略号结尾的文本",
      "input": [
        { "text": "This is fine..." },
        { "text": "Normal sentence." }
      ],
      "output": [
        { "text": "Normal sentence." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/LineEndWithEllipsisFilter.yaml --step_name LineEndWithEllipsisFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 11,
      "name": "ContentNullFilter",
      "type": "processor",
      "description": "空文本过滤",
      "input": [
        { "text": "" },
        { "text": "Non-empty." }
      ],
      "output": [
        { "text": "Non-empty." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/ContentNullFilter.yaml --step_name ContentNullFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 12,
      "name": "MeanWordLengthFilter",
      "type": "processor",
      "description": "文本平均单词长度过滤",
      "input": [
        { "text": "a b c d e" },
        { "text": "This sentence has reasonable word lengths." }
      ],
      "output": [
        { "text": "This sentence has reasonable word lengths." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/MeanWordLengthFilter.yaml --step_name MeanWordLengthFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 13,
      "name": "SymbolWordRatioFilter",
      "type": "processor",
      "description": "过滤符号/单词比例过大的文本",
      "input": [
        { "text": "@@@### $$$ Hello" },
        { "text": "Normal text." }
      ],
      "output": [
        { "text": "Normal text." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/SymbolWordRatioFilter.yaml --step_name SymbolWordRatioFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 14,
      "name": "HtmlEntityFilter",
      "type": "processor",
      "description": "过滤掉 HTML 实体或标签过多的文本",
      "input": [
        { "text": "&nbsp;&nbsp;&lt;p&gt;Hello&lt;/p&gt;" },
        { "text": "Clean text." }
      ],
      "output": [
        { "text": "Clean text." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/HtmlEntityFilter.yaml --step_name HtmlEntityFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 15,
      "name": "IDCardFilter",
      "type": "processor",
      "description": "过滤掉含 ID card 的文本",
      "input": [
        { "text": "My ID card number is 1234567890." },
        { "text": "No sensitive info here." }
      ],
      "output": [
        { "text": "No sensitive info here." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/IDCardFilter.yaml --step_name IDCardFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 16,
      "name": "NoPuncFilter",
      "type": "processor",
      "description": "过滤掉无标点符号的文本",
      "input": [
        { "text": "This has punctuation." },
        { "text": "This has no punctuation" }
      ],
      "output": [
        { "text": "This has punctuation." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/NoPuncFilter.yaml --step_name NoPuncFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 17,
      "name": "SpecialCharacterFilter",
      "type": "processor",
      "description": "过滤掉特殊符号过多的文本",
      "input": [
        { "text": "***@@@###$$$" },
        { "text": "Normal text." }
      ],
      "output": [
        { "text": "Normal text." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/SpecialCharacterFilter.yaml --step_name SpecialCharacterFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 18,
      "name": "WatermarkFilter",
      "type": "processor",
      "description": "过滤掉含水印的文本",
      "input": [
        { "text": "© 2025 Company" },
        { "text": "Regular text." }
      ],
      "output": [
        { "text": "Regular text." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/WatermarkFilter.yaml --step_name WatermarkFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 19,
      "name": "CurlyBracketFilter",
      "type": "processor",
      "description": "过滤掉括号比例高的文本",
      "input": [
        { "text": "{{{Hello}}}" },
        { "text": "Hello world." }
      ],
      "output": [
        { "text": "Hello world." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/CurlyBracketFilter.yaml --step_name CurlyBracketFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 20,
      "name": "CapitalWordsFilter",
      "type": "processor",
      "description": "过滤掉大写字母比例高的文本",
      "input": [
        { "text": "THIS IS ALL CAPS." },
        { "text": "Normal text." }
      ],
      "output": [
        { "text": "Normal text." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/CapitalWordsFilter.yaml --step_name CapitalWordsFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 21,
      "name": "LoremIpsumFilter",
      "type": "processor",
      "description": "过滤掉含 lorem ipsum 的文本",
      "input": [
        { "text": "Lorem ipsum dolor sit amet." },
        { "text": "Meaningful sentence." }
      ],
      "output": [
        { "text": "Meaningful sentence." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/LoremIpsumFilter.yaml --step_name LoremIpsumFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 22,
      "name": "UniqueWordsFilter",
      "type": "processor",
      "description": "过滤掉 unique 单词少的文本",
      "input": [
        { "text": "repeat repeat repeat" },
        { "text": "Each word is unique here." }
      ],
      "output": [
        { "text": "Each word is unique here." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/UniqueWordsFilter.yaml --step_name UniqueWordsFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 23,
      "name": "CharNumberFilter",
      "type": "processor",
      "description": "过滤掉字符较少的文本",
      "input": [
        { "text": "Hi" },
        { "text": "This is sufficiently long." }
      ],
      "output": [
        { "text": "This is sufficiently long." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/CharNumberFilter.yaml --step_name CharNumberFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 24,
      "name": "LineStartWithBulletpointFilter",
      "type": "processor",
      "description": "过滤掉以项目符号开头的文本",
      "input": [
        { "text": "- Bullet point line" },
        { "text": "Regular line." }
      ],
      "output": [
        { "text": "Regular line." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/LineStartWithBulletpointFilter.yaml --step_name LineStartWithBulletpointFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 25,
      "name": "LineWithJavascriptFilter",
      "type": "processor",
      "description": "过滤掉含 JavaScript 代码的文本",
      "input": [
        { "text": "<script>console.log('Hi');</script>" },
        { "text": "Just plain English." }
      ],
      "output": [
        { "text": "Just plain English." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/LineWithJavascriptFilter.yaml --step_name LineWithJavascriptFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 26,
      "name": "PairQualFilter",
      "type": "processor",
      "description": "使用算创文本质量打分器过滤数据",
      "input": [
        { "text": "Low quality text." },
        { "text": "High quality text." }
      ],
      "output": [
        { "text": "High quality text." }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/PairQualFilter.yaml --step_name PairQualFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 27,
      "name": "PretrainGenerator",
      "type": "generator",
      "description": "根据预训练数据合成类 phi-4 预训练数据，一个输入数据可生成多个输出",
      "input": [
        { "source": "原文内容", "pretrain_data": "…" }
      ],
      "output": [
        { "generated_content": "生成内容 A", "source": "原文内容" },
        { "generated_content": "生成内容 B", "source": "原文内容" }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/PretrainGenerator.yaml --step_name PretrainGenerator --step_type generator",
      "required": true,
      "depends_on": []
    },
    {
      "node": 28,
      "name": "QuratingFilter",
      "type": "processor",
      "description": "从 Writing Style、Facts & Trivia、Educational Value、Required Expertise 四个维度按照质量分数过滤数据，删除部分数据",
      "input": [
        { "text": "Low quality pretrain data" },
        { "text": "High quality pretrain data" }
      ],
      "output": [
        { "text": "High quality pretrain data" }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/QuratingFilter.yaml --step_name QuratingFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 29,
      "name": "SupervisedFinetuneGenerator",
      "type": "generator",
      "description": "根据预训练文档种子数据合成 SFT 数据，每个输入合成 3 个问题",
      "input": [
        { "instruction": "Seed instruction", "output": "Seed output" }
      ],
      "output": [
        { "instruction": "Seed instruction #1", "output": "Generated answer #1" },
        { "instruction": "Seed instruction #2", "output": "Generated answer #2" },
        { "instruction": "Seed instruction #3", "output": "Generated answer #3" }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/SupervisedFinetuneGenerator.yaml --step_name SupervisedFinetuneGenerator --step_type generator",
      "required": true,
      "depends_on": []
    },
    {
      "node": 30,
      "name": "SuperfilteringFilter",
      "type": "processor",
      "description": "按照质量 IFD 分数过滤 SFT 数据，删除部分数据",
      "input": [
        { "instruction": "Low quality", "output": "…" },
        { "instruction": "High quality", "output": "…" }
      ],
      "output": [
        { "instruction": "High quality", "output": "…" }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/SuperfilteringFilter_syn.yaml --step_name SuperfilteringFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 31,
      "name": "DeitaQualityFilter",
      "type": "processor",
      "description": "按照指令质量得分过滤 SFT 数据",
      "input": [
        { "instruction": "Low quality", "output": "…" },
        { "instruction": "High quality", "output": "…" }
      ],
      "output": [
        { "instruction": "High quality", "output": "…" }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/DeitaQualityFilter_syn.yaml --step_name DeitaQualityFilter --step_type process",
      "required": false,
      "depends_on": []
    },
    {
      "node": 32,
      "name": "InstagFilter",
      "type": "processor",
      "description": "按照 instruction 标签数过滤 SFT 数据",
      "input": [
        { "instruction": ["one"] },
        { "instruction": ["one","two","three"] }
      ],
      "output": [
        { "instruction": ["one","two","three"] }
      ],
      "command": "python pipeline_step.py --yaml_path text_pipeline/yaml/InstagFilter_syn.yaml --step_name InstagFilter --step_type process",
      "required": false,
      "depends_on": []
    }
  ],
  "CODE": [
    {
      "node": 1,
      "name": "LanguageClassifier",
      "type": "generator",
      "description": "识别代码数据的语言，加入新 key: lang",
      "input": [
        { "code": "print('Hello')" },
        { "code": "console.log('Hi')" }
      ],
      "output": [
        { "code": "print('Hello')", "lang": "python" },
        { "code": "console.log('Hi')", "lang": "javascript" }
      ],
      "command": "python CodePipeline/code/classify.py --yaml_path CodePipeline/yaml/classifier.yaml",
      "required": true,
      "depends_on": []
    },
    {
      "node": 2,
      "name": "StaticCodeChecker",
      "type": "generator",
      "description": "对代码进行静态类型检查，加入新 key: check_result, detail",
      "input": [
        { "code": "a: int = 'string'" }
      ],
      "output": [
        { "code": "a: int = 'string'", "check_result": "error", "detail": "Type mismatch" }
      ],
      "command": "python CodePipeline/code/static_check.py --yaml_path CodePipeline/yaml/static_check.yaml",
      "required": false,
      "depends_on": []
    },
    {
      "node": 3,
      "name": "TreeSitterParser",
      "type": "generator",
      "description": "对代码进行 AST 级别检查，加入新 key: ast_error, ast_error_info",
      "input": [
        { "code": "def foo(): pass" }
      ],
      "output": [
        { "code": "def foo(): pass", "ast_error": false, "ast_error_info": "" }
      ],
      "command": "python CodePipeline/code/ast_checker.py --yaml_path CodePipeline/yaml/tree_sitter.yaml",
      "required": false,
      "depends_on": []
    },
    {
      "node": 4,
      "name": "CodeFilter",
      "type": "generator",
      "description": "根据 StaticCodeChecker 和 TreeSitterParser 的结果进行过滤，删除部分数据",
      "input": [
        {
          "code": "a: int = 'string'",
          "check_result": "error",
          "detail": "Type mismatch",
          "ast_error": false,
          "ast_error_info": ""
        },
        {
          "code": "def foo(): pass",
          "check_result": "ok",
          "detail": "",
          "ast_error": false,
          "ast_error_info": ""
        }
      ],
      "output": [
        {
          "code": "def foo(): pass",
          "check_result": "ok",
          "detail": "",
          "ast_error": false,
          "ast_error_info": ""
        }
      ],
      "command": "python CodePipeline/code/code_filter.py --yaml_path CodePipeline/yaml/filter_static.yaml && python CodePipeline/code/code_filter.py --yaml_path CodePipeline/yaml/filter_ast.yaml",
      "required": false,
      "depends_on": []
    },
    {
      "node": 5,
      "name": "CodeCommentGenerator",
      "type": "generator",
      "description": "给代码添加注释，加入新 key: commented_content",
      "input": [
        { "code": "def add(a, b): return a + b" }
      ],
      "output": [
        {
          "code": "def add(a, b): return a + b",
          "commented_content": "# Adds two numbers\ndef add(a, b): return a + b"
        }
      ],
      "command": "python CodePipeline/code/code_comment.py --yaml_path CodePipeline/yaml/code_comment.yaml",
      "required": false,
      "depends_on": []
    },
    {
      "node": 6,
      "name": "CodeRefiner",
      "type": "generator",
      "description": "对代码的变量命名、可读性等进行优化，加入新 key: varname_content",
      "input": [
        { "code": "def foo(x): return x*2" }
      ],
      "output": [
        {
          "code": "def foo(x): return x*2",
          "varname_content": "def double(x): return x * 2"
        }
      ],
      "command": "python CodePipeline/code/code_variname.py --yaml_path CodePipeline/yaml/var_name.yaml",
      "required": false,
      "depends_on": []
    },
    {
      "node": 7,
      "name": "ExtractLines",
      "type": "generator",
      "description": "提取代码片段，加入新 key: code",
      "input": [
        { "content": "Here is some text.\n```python\ndef foo(): pass\n```\nEnd." }
      ],
      "output": [
        {
          "content": "Here is some text.\n```python\ndef foo(): pass\n```\nEnd.",
          "code": "def foo(): pass"
        }
      ],
      "command": "python CodePipeline/code/extract_lines.py --yaml_path CodePipeline/yaml/extract_lines.yaml",
      "required": true,
      "depends_on": []
    },
    {
      "node": 8,
      "name": "OSSInstGenerator",
      "type": "generator",
      "description": "进行代码 QA 数据合成，加入新 key: oss_inst",
      "input": [
        { "code": "def foo(): pass" }
      ],
      "output": [
        {
          "code": "def foo(): pass",
          "oss_inst": "Describe what foo does and how it can be used"
        }
      ],
      "command": "python CodePipeline/code/oss-inst.py --yaml_path CodePipeline/yaml/oss-inst.yaml",
      "required": true,
      "depends_on": []
    },
    {
      "node": 9,
      "name": "CodeScorer",
      "type": "generator",
      "description": "对代码 QA 数据进行打分，加入新 key: scores",
      "input": [
        {
          "code": "def foo(): pass",
          "question": "What does foo do?"
        }
      ],
      "output": [
        {
          "code": "def foo(): pass",
          "question": "What does foo do?",
          "scores": { "correctness": 1.0, "clarity": 0.8 }
        }
      ],
      "command": "python CodePipeline/code/code_scores.py --yaml_path CodePipeline/yaml/code_scores.yaml",
      "required": true,
      "depends_on": []
    }
  ],
  "MATH&SCIENCE":  [
    {
      "node": 1,
      "name": "QuestionGenerator",
      "type": "generator",
      "description": "基于现有的问题数据，每个问题合成1-5个新问题",
      "input": [
        { "instruction": "1+1=?", "output": "1+1=2." }
      ],
      "output": [
        { "instruction": "1+1=?", "output": "1+1=2.", "Synth_or_Input": "input" },
        { "instruction": "2+5=?", "output": null, "Synth_or_Input": "synth" }
      ],
      "command": "python ReasoningPipeline/code/QuestionGenerator.py --yaml_path ReasoningPipeline/yaml/QuestionGenerator.yaml",
      "required": true,
      "depends_on": []
    },
    {
      "node": 2,
      "name": "QuestionFilter",
      "type": "filter",
      "description": "检查每个问题的正确性",
      "input": [
        { "instruction": "1+1=?", "output": "1+1=2.", "Synth_or_Input": "input" },
        { "instruction": "2+5=10", "output": null, "Synth_or_Input": "synth" }
      ],
      "output": [
        { "instruction": "1+1=?", "output": "1+1=2.", "Synth_or_Input": "input" }
      ],
      "command": "python process.py --config configs/process/math/pipeline_Q/test_process_math_step2.yaml",
      "required": true,
      "depends_on": []
    },
    {
      "node": 3,
      "name": "QuestionDifficultyClassifier",
      "type": "generator",
      "description": "为每个问题确定一个难度分数标签",
      "input": [
        { "instruction": "1+1=?", "output": "1+1=2.", "Synth_or_Input": "input" }
      ],
      "output": [
        { "instruction": "1+1=?", "output": "1+1=2.", "Synth_or_Input": "input", "question_difficulty": 1.0 }
      ],
      "command": "python ReasoningPipeline/code/QuestionDifficultyClassifier.py --yaml_path ReasoningPipeline/yaml/QuestionDifficultyClassifier.yaml",
      "required": true,
      "depends_on": []
    },
    {
      "node": 4,
      "name": "QuestionCategoryClassifier",
      "type": "generator",
      "description": "将所有问题分类到7个大类别，以及每个大类别下的若干的小类别",
      "input": [
        { "instruction": "1+1=?", "output": "1+1=2.", "Synth_or_Input": "input" }
      ],
      "output": [
        { "instruction": "1+1=?", "output": "1+1=2.", "Synth_or_Input": "input", "primary_category": "xxxx", "secondary_category": "yyyy" }
      ],
      "command": "python ReasoningPipeline/code/QuestionCategoryClassifier.py --yaml_path ReasoningPipeline/yaml/QuestionCategoryClassifier.yaml",
      "required": true,
      "depends_on": []
    },
    {
      "node": 5,
      "name": "AnswerPipelineRoot",
      "type": "generator",
      "description": "用于检查数据是否包含Answer、groundtruth，并分离有答案和没答案的数据，方便后续分别处理",
      "input": [
        { "input_answer_key": "This is a test answer 1", "input_gt_key": "1" },
        { "input_answer_key": "This is a test answer 2", "input_gt_key": "2" },
        { "input_answer_key": "This is a test answer 3", "input_gt_key": null },
        { "input_answer_key": null, "input_gt_key": "4" },
        { "input_answer_key": null, "input_gt_key": null }
      ],
      "output": {
        "with_answer": [
          { "input_answer_key": "This is a test answer 1", "input_gt_key": 1.0 },
          { "input_answer_key": "This is a test answer 2", "input_gt_key": 2.0 },
          { "input_answer_key": null, "input_gt_key": 4.0 }
        ],
        "without_answer": [
          { "input_answer_key": "This is a test answer 3", "input_gt_key": null },
          { "input_answer_key": null, "input_gt_key": null }
        ]
      },
      "command": "python ReasoningPipeline/code/AnswerPipelineRoot.py --yaml_path ReasoningPipeline/yaml/AnswerPipelineRoot.yaml",
      "required": true,
      "depends_on": []
    },
    {
      "node": 6,
      "name": "PseudoAnswerGenerator",
      "type": "generator",
      "description": "为没有答案的数据依据模型多次回答 voting 生成伪答案",
      "input": [
        {
          "source": null,
          "instruction": "Jenny is designing a game where players roll two standard six-sided dice and assign the numbers rolled to different categories for points. However, she wants to incentivize rolling numbers that form a ratio close to 3:2 when arranged in either order. If each player rolls two dice, what is the probability that the pair of numbers rolled can form a ratio that simplifies to exactly 3:2 in either order? Express your answer as a common fraction.",
          "output": null,
          "Synth_or_Input": "synth",
          "question_difficulty": 1.0,
          "primary_category": "5. Probability, Statistics, and Discrete Mathematics",
          "secondary_category": "5.1 Probability Theory and Stochastic Processes"
        }
      ],
      "output": [
        {
          "source": null,
          "instruction": "Jenny is designing a game where players roll two standard six-sided dice and assign the numbers rolled to different categories for points. However, she wants to incentivize rolling numbers that form a ratio close to 3:2 when arranged in either order. If each player rolls two dice, what is the probability that the pair of numbers rolled can form a ratio that simplifies to exactly 3:2 in either order? Express your answer as a common fraction.",
          "output": null,
          "Synth_or_Input": "synth",
          "question_difficulty": 1.0,
          "primary_category": "5. Probability, Statistics, and Discrete Mathematics",
          "secondary_category": "5.1 Probability Theory and Stochastic Processes",
          "pseudo_answers": ["\\frac{2}{9}", "\\frac{2}{9}", "9"],
          "pseudo_solutions": ["solution 1", "solution2", "solution3"],
          "pseudo_correct_solution_example": "solution2",
          "pseudo_answer_value": "\\frac{2}{9}"
        }
      ],
      "command": "python ReasoningPipeline/code/PseudoAnswerGenerator.py --yaml_path ReasoningPipeline/yaml/PseudoAnswerGenerator.yaml",
      "required": true,
      "depends_on": []
    },
    {
      "node": 7,
      "name": "AnswerFormatterFilter",
      "type": "processor",
      "description": "按照给定的格式，基于规则过滤掉不符合格式要求的数据",
      "input": [
        { "instruction": "1+1=?", "output": "1+1=2." },
        { "instruction": "1+1=?", "output": "1+1=2,so final anwer is /boxed{2}" }
      ],
      "output": [
        { "instruction": "1+1=?", "output": "1+1=2,so final anwer is /boxed{2}" }
      ],
      "command": "python process.py --config configs/process/math/pipeline_GT/text_process_reasoner_formatfilter.yaml",
      "required": true,
      "depends_on": []
    },
    {
      "node": 8,
      "name": "AnswerTokenLengthFilter",
      "type": "processor",
      "description": "过滤掉Answer长度不合适的数据",
      "input": [
        { "instruction": "1+1=?", "output": "1+1=2,so final anwer is /boxed{2}" },
        { "instruction": "1+1=?", "output": "1+1=2,so final anwer is /boxed{2}!!!!!!!!!!!!!!!!!!...!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" },
        { "instruction": "1+1=?", "output": "1+1=2,so final anwer is /boxed{2}" }
      ],
      "output": [
        { "instruction": "1+1=?", "output": "1+1=2,so final anwer is /boxed{2}" },
        { "instruction": "1+1=?", "output": "1+1=2,so final anwer is /boxed{2}" }
      ],
      "command": "python process.py --config configs/process/math/pipeline_withoutGT/text_process_reasoner_lengthfilter.yaml",
      "required": true,
      "depends_on": []
    },
    {
      "node": 9,
      "name": "AnswerNgramFilter",
      "type": "processor",
      "description": "对Q和A一起构成的字符串进行 n-gram 去重",
      "input": [
        { "instruction": "1+1=?", "output": "1+1=2,so final anwer is /boxed{2}" },
        { "instruction": "1+1=?", "output": "1+1=2,so final anwer is /boxed{2}" },
        { "instruction": "1+1=?", "output": "1+1=2,so final anwer is /boxed{2}" },
        { "instruction": "1+1=?", "output": "1+1=2,so final anwer is /boxed{2}" },
        { "instruction": "1+1=?", "output": "1+1=2." },
        { "instruction": "1+1=?", "output": "1+1=2,so final anwer is /boxed{2}" },
        { "instruction": "1+1=?", "output": "1+1=2." }
      ],
      "output": [
        { "instruction": "1+1=?", "output": "1+1=2,so final anwer is /boxed{2}" },
        { "instruction": "1+1=?", "output": "1+1=2." }
      ],
      "command": "python process.py --config configs/process/math/pipeline_withoutGT/text_process_reasoner_ngramfilter.yaml",
      "required": true,
      "depends_on": []
    }
  ]
}
